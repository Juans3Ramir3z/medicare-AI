from flask import Flask, render_template, request, jsonify
from datetime import datetime, timedelta
import sqlite3
import os
import json

app = Flask(__name__)
app.secret_key = 'medicare_ai_secret_key_2024'

class MediCareAI:
    def __init__(self):
        self.init_database()
    
    def init_database(self):
        """Inicializar base de datos"""
        conn = sqlite3.connect('medicare.db')
        c = conn.cursor()
        
        # Tabla de usuarios
        c.execute('''CREATE TABLE IF NOT EXISTS usuarios
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     nombre TEXT NOT NULL,
                     edad INTEGER,
                     condiciones_medicas TEXT,
                     alergias TEXT,
                     fecha_registro DATE)''')
        
        # Tabla de medicamentos
        c.execute('''CREATE TABLE IF NOT EXISTS medicamentos
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     usuario_id INTEGER,
                     nombre TEXT NOT NULL,
                     dosis TEXT,
                     horarios TEXT,
                     fecha_inicio DATE,
                     fecha_fin DATE,
                     FOREIGN KEY (usuario_id) REFERENCES usuarios (id))''')
        
        # Tabla de consultas
        c.execute('''CREATE TABLE IF NOT EXISTS consultas
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     usuario_id INTEGER,
                     sintomas TEXT,
                     respuesta_ia TEXT,
                     fecha_consulta DATETIME,
                     urgencia TEXT,
                     FOREIGN KEY (usuario_id) REFERENCES usuarios (id))''')
        
        conn.commit()
        conn.close()
        print("‚úÖ Base de datos inicializada correctamente")
    
    def generar_respuesta_medica(self, sintomas, historial=None):
        """Generar respuesta m√©dica usando IA (simulada por ahora)"""
        
        # Simulaci√≥n de IA - Respuestas inteligentes basadas en palabras clave
        respuestas_base = {
            "dolor de cabeza": {
                "respuesta": "El dolor de cabeza puede tener m√∫ltiples causas. Te recomiendo: 1) Descansar en un lugar tranquilo y oscuro, 2) Aplicar compresas fr√≠as en la frente, 3) Mantenerte bien hidratado, 4) Evitar ruidos fuertes. Si el dolor persiste m√°s de 24 horas o es muy intenso, consulta a un m√©dico.",
                "urgencia": "baja"
            },
            "fiebre": {
                "respuesta": "La fiebre es una respuesta natural del cuerpo a infecciones. Recomendaciones: 1) Mantente bien hidratado con l√≠quidos, 2) Descansa en cama, 3) Usa ropa ligera, 4) Aplica compresas tibias si es necesario. Si la fiebre supera 38.5¬∞C o dura m√°s de 3 d√≠as, busca atenci√≥n m√©dica.",
                "urgencia": "media"
            },
            "dolor de pecho": {
                "respuesta": "‚ö†Ô∏è El dolor de pecho puede ser serio y requiere atenci√≥n m√©dica inmediata. Por favor: 1) Busca atenci√≥n m√©dica urgente AHORA, 2) No conduzcas, pide que te lleven al hospital, 3) Mantente calmado, 4) Si tienes medicamentos card√≠acos prescritos, t√≥malos seg√∫n las indicaciones de tu m√©dico.",
                "urgencia": "alta"
            },
            "mareo": {
                "respuesta": "Los mareos pueden ser causados por varias razones. Te sugiero: 1) Si√©ntate o acu√©state inmediatamente, 2) Mantente hidratado, 3) Evita movimientos bruscos, 4) Verifica si has comido recientemente. Si los mareos son frecuentes o severos, consulta con tu m√©dico.",
                "urgencia": "baja"
            },
            "dificultad respirar": {
                "respuesta": "‚ö†Ô∏è La dificultad para respirar puede ser seria. Acciones inmediatas: 1) Busca atenci√≥n m√©dica urgente, 2) Si√©ntate en posici√≥n erguida, 3) Mantente calmado, 4) Si tienes inhalador, √∫salo seg√∫n prescripci√≥n. No esperes, busca ayuda m√©dica ahora.",
                "urgencia": "alta"
            }
        }
        
        # Buscar s√≠ntomas clave en el texto
        sintomas_lower = sintomas.lower()
        for clave, info in respuestas_base.items():
            if clave in sintomas_lower:
                return info
        
        # Respuesta por defecto para s√≠ntomas no espec√≠ficos
        return {
            "respuesta": f"Gracias por consultarme sobre: '{sintomas}'. Bas√°ndome en lo que describes, te recomiendo: 1) Monitorear cuidadosamente tu estado, 2) Descansar adecuadamente, 3) Mantener una buena hidrataci√≥n, 4) Anotar cualquier cambio en los s√≠ntomas. Si los s√≠ntomas empeoran, persisten por m√°s de 24 horas, o te causan preocupaci√≥n, no dudes en consultar con un profesional m√©dico. Recuerda que esta es una orientaci√≥n general y no reemplaza el diagn√≥stico m√©dico profesional.",
            "urgencia": "baja"
        }
    
    def agregar_medicamento(self, usuario_id, nombre, dosis, horarios):
        """Agregar medicamento al sistema"""
        conn = sqlite3.connect('medicare.db')
        c = conn.cursor()
        c.execute("INSERT INTO medicamentos (usuario_id, nombre, dosis, horarios, fecha_inicio) VALUES (?, ?, ?, ?, ?)",
                 (usuario_id, nombre, dosis, json.dumps(horarios), datetime.now().date()))
        conn.commit()
        conn.close()
        print(f"‚úÖ Medicamento '{nombre}' agregado correctamente")
    
    def obtener_medicamentos(self, usuario_id):
        """Obtener medicamentos del usuario"""
        conn = sqlite3.connect('medicare.db')
        c = conn.cursor()
        c.execute("SELECT * FROM medicamentos WHERE usuario_id = ?", (usuario_id,))
        medicamentos = c.fetchall()
        conn.close()
        return medicamentos

# Instancia global
medicare_ai = MediCareAI()

@app.route('/')
def index():
    """P√°gina principal"""
    print("üì± Acceso a p√°gina principal")
    return render_template('index.html')

@app.route('/chat')
def chat():
    """P√°gina de chat m√©dico"""
    print("üí¨ Acceso a chat m√©dico")
    return render_template('chat.html')

@app.route('/medicamentos')
def medicamentos():
    """P√°gina de gesti√≥n de medicamentos"""
    print("üíä Acceso a gesti√≥n de medicamentos")
    return render_template('medicamentos.html')

@app.route('/historial')
def historial():
    """P√°gina de historial m√©dico"""
    print("üìã Acceso a historial m√©dico")
    return render_template('historial.html')

@app.route('/api/consulta', methods=['POST'])
def consulta_medica():
    """API para consultas m√©dicas con IA"""
    try:
        data = request.get_json()
        sintomas = data.get('sintomas', '')
        
        if not sintomas:
            return jsonify({'error': 'No se proporcionaron s√≠ntomas'}), 400
        
        print(f"üîç Analizando s√≠ntomas: {sintomas}")
        
        # Generar respuesta con IA
        respuesta = medicare_ai.generar_respuesta_medica(sintomas)
        
        # Guardar consulta en base de datos
        conn = sqlite3.connect('medicare.db')
        c = conn.cursor()
        c.execute("INSERT INTO consultas (usuario_id, sintomas, respuesta_ia, fecha_consulta, urgencia) VALUES (?, ?, ?, ?, ?)",
                 (1, sintomas, respuesta['respuesta'], datetime.now(), respuesta['urgencia']))
        conn.commit()
        conn.close()
        
        print(f"‚úÖ Consulta procesada - Urgencia: {respuesta['urgencia']}")
        
        return jsonify(respuesta)
        
    except Exception as e:
        print(f"‚ùå Error en consulta: {str(e)}")
        return jsonify({'error': 'Error interno del servidor'}), 500

@app.route('/api/medicamentos', methods=['POST'])
def agregar_medicamento_api():
    """API para agregar medicamentos"""
    try:
        data = request.get_json()
        
        medicare_ai.agregar_medicamento(
            usuario_id=1,
            nombre=data.get('nombre'),
            dosis=data.get('dosis'),
            horarios=data.get('horarios', [])
        )
        
        return jsonify({'status': 'success', 'message': 'Medicamento agregado correctamente'})
        
    except Exception as e:
        print(f"‚ùå Error agregando medicamento: {str(e)}")
        return jsonify({'error': 'Error al agregar medicamento'}), 500

@app.route('/api/recordatorios')
def obtener_recordatorios():
    """API para obtener recordatorios de medicamentos"""
    try:
        medicamentos = medicare_ai.obtener_medicamentos(usuario_id=1)
        
        recordatorios = []
        for med in medicamentos:
            horarios = json.loads(med[4]) if med[4] else []
            for horario in horarios:
                recordatorios.append({
                    'medicamento': med[2],
                    'dosis': med[3],
                    'hora': horario,
                    'id': med[0]
                })
        
        return jsonify(recordatorios)
        
    except Exception as e:
        print(f"‚ùå Error obteniendo recordatorios: {str(e)}")
        return jsonify({'error': 'Error al obtener recordatorios'}), 500

@app.route('/api/generar_reporte', methods=['POST'])
def generar_reporte():
    """API para generar reporte m√©dico con IA"""
    try:
        data = request.get_json()
        periodo = data.get('periodo', '30')
        
        # Obtener historial del periodo
        conn = sqlite3.connect('medicare.db')
        c = conn.cursor()
        fecha_limite = datetime.now() - timedelta(days=int(periodo))
        c.execute("SELECT * FROM consultas WHERE usuario_id = ? AND fecha_consulta > ?", (1, fecha_limite))
        consultas = c.fetchall()
        conn.close()
        
        # Generar reporte con IA (simulado)
        if consultas:
            sintomas_frecuentes = [c[2] for c in consultas[:5]]  # Top 5
            consultas_urgentes = len([c for c in consultas if c[5] == 'alta'])
            
            reporte = f"""
REPORTE M√âDICO GENERADO POR IA
===============================
Per√≠odo: √öltimos {periodo} d√≠as
Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}
Paciente: Usuario Demo

RESUMEN DE ACTIVIDAD:
‚Ä¢ Total de consultas realizadas: {len(consultas)}
‚Ä¢ Consultas de urgencia alta: {consultas_urgentes}
‚Ä¢ Consultas de seguimiento regular: {len(consultas) - consultas_urgentes}

S√çNTOMAS M√ÅS CONSULTADOS:
{chr(10).join([f"‚Ä¢ {sintoma[:50]}..." if len(sintoma) > 50 else f"‚Ä¢ {sintoma}" for sintoma in sintomas_frecuentes[:3]])}

RECOMENDACIONES GENERALES:
1. Mantener seguimiento m√©dico regular con su doctor de cabecera
2. Continuar con los medicamentos prescritos seg√∫n indicaciones
3. Monitorear los s√≠ntomas recurrentes y reportar cambios
4. Mantener h√°bitos saludables de alimentaci√≥n y ejercicio

PR√ìXIMOS PASOS SUGERIDOS:
‚Ä¢ Agendar cita de control con m√©dico primario
‚Ä¢ Revisar medicamentos actuales con farmac√©utico
‚Ä¢ Considerar evaluaci√≥n especializada si s√≠ntomas persisten

NOTA IMPORTANTE: Este reporte es generado por Inteligencia Artificial y 
debe ser complementado con evaluaci√≥n m√©dica profesional. No reemplaza 
el criterio cl√≠nico de un profesional de la salud.

Generado por MediCare AI v1.0
            """
        else:
            reporte = f"""
REPORTE M√âDICO - PER√çODO SIN ACTIVIDAD
======================================
Per√≠odo: √öltimos {periodo} d√≠as
Fecha: {datetime.now().strftime('%d/%m/%Y %H:%M')}

No se registraron consultas m√©dicas en el per√≠odo seleccionado.

RECOMENDACIONES:
‚Ä¢ Recuerde que puede usar MediCare AI cuando tenga dudas sobre su salud
‚Ä¢ Mantenga sus controles m√©dicos regulares
‚Ä¢ Registre sus medicamentos para mejores recordatorios

¬°Su bienestar es nuestra prioridad!
            """
        
        return jsonify({'reporte': reporte})
        
    except Exception as e:
        print(f"‚ùå Error generando reporte: {str(e)}")
        return jsonify({'error': 'Error al generar reporte'}), 500

# Ruta de prueba para verificar que todo funciona
@app.route('/test')
def test():
    """Ruta de prueba"""
    return jsonify({
        'status': 'success', 
        'message': 'üéâ MediCare AI funcionando correctamente!',
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ Iniciando MediCare AI...")
    print("üìù Configurando base de datos...")
    print("‚úÖ ¬°Aplicaci√≥n lista!")
    print("üåê Accede a: http://localhost:5000")
    app.run(debug=True, port=5000)